#!/usr/bin/expect -f
# Test :cd and :pwd built-in commands.
#
# Environment variables:
#   LMI     - path to lmi meta-command executable with optional argumenta.
#
# Last change dir is unsuccessful.
# Exits with the exit code os spawned lmi shell.

set timeout 1

expect_after {
    timeout { exit -1 }
}

proc send1l {in out} {
    send   "$in\r"
    expect "$out"
}

proc send2l {in out1 out2} {
    send   "$in\r"
    expect "$out1"
    expect "$out2"
}

set LMI lmi
if {[info exists env(LMI)]} {
    set LMI $env(LMI)
}
spawn {*}$LMI
expect "lmi> "
send2l ": pwd"        "/lmi"        "lmi> "
send1l ": cd ."       "lmi> "
send2l " : pwd "      "/lmi"        "lmi> "
send1l ":cd .."       "lmi> "
send1l ":cd /"        "lmi> "
send1l " : cd // "    "lmi> "
send1l ": cd test"    ">test> "
send2l ": pwd"        "/lmi/test"   ">test> "
send1l ":cd ."        ">test> "
send1l ": .."         "lmi> "
send2l ":pwd"         "/lmi"        "lmi> "
send1l ":cd test"     ">test> "
send1l ":cd / "       "lmi> "
send1l ":cd test/"    ">test> "
send1l ":cd ../test"  ">test> "
send1l ":cd .././test/.././test/../"    "lmi> "
send1l ":cd test/./"  ">test> "
send1l ":cd list"     ">>list> "
send2l ":pwd"         "/lmi/test/list"  ">>list> "
send1l ":cd .."       ">test> "
send1l ":cd /lmi/test/list"     "list> "
send1l ":cd /lmi"     "lmi> "
send1l ":cd /test/list"         "list> "
send1l ":cd"          "list> "
send1l ":cd /./test/../test/./list"     ">>list> "
send2l ":cd /foo"     "no such subcommand \"foo\""  ">>list> "
send2l ":cd pkgs"     "ERROR: can not nest to subcommand \"pkgs\" which is not a multiplexer" ">>list> "
send2l ":cd ../show"  "ERROR: can not nest to subcommand \"../show\" which lacks any help message" ">>list> "
send2l ":cd foo"      "ERROR: no such subcommand \"foo\"" ">>list> "
send   ""
expect ">test> "
send   ""
expect "lmi> "
send   ""
expect ""
catch wait result
exit [lindex $result 3]
